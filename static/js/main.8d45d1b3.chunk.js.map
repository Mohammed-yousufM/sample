{"version":3,"sources":["components/VideoPlayer.js","App.js","reportWebVitals.js","index.js"],"names":["styles","localVideoPlayer","width","height","backgroundColor","remoteVideoPlayer","VideoPlayer","textVal","localVideoRef","useRef","remoteVideoRef","constraints","video","rtcPeerObject","RTCPeerConnection","useEffect","onicecandidate","e","candidate","console","log","JSON","stringify","oniceconnectionstatechange","ontrack","a","streams","current","srcObject","navigator","mediaDevices","getUserMedia","then","stream","getVideoTracks","addTrack","catch","err","ref","autoPlay","style","onClick","createOffer","sdp","setLocalDescription","createAnswer","onChange","target","value","desc","parse","setRemoteDescription","RTCSessionDescription","addIceCandidate","RTCIceCandidate","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNA6GA,IAAMA,EAAS,CACbC,iBAAkB,CAChBC,MAAO,IACPC,OAAQ,IACRC,gBAAiB,SAGnBC,kBAAmB,CACjBH,MAAO,IACPC,OAAQ,IACRC,gBAAiB,WAINE,EAzHf,WAIE,IAAIC,EAAU,GACRC,EAAgBC,iBAAO,MACvBC,EAAiBD,iBAAO,MAGxBE,EAAc,CAAEC,OAAO,GACvBC,EAAgB,IAAIC,kBAFR,MAwElB,OApEAC,qBAAU,WACRF,EAAcG,eAAiB,SAACC,GAC1BA,EAAEC,WACJC,QAAQC,IAAIC,KAAKC,UAAUL,EAAEC,aAIjCL,EAAcU,2BAA6B,SAACN,GAC1CE,QAAQC,IAAIH,IAGdJ,EAAcW,QAAd,uCAAwB,WAAOP,GAAP,SAAAQ,EAAA,sEACmBR,EAAES,QAAQ,GAD7B,OACtBhB,EAAeiB,QAAQC,UADD,OAEtBT,QAAQC,IAAIH,EAAES,QAAS,wBAFD,2CAAxB,sDAKAG,UAAUC,aACPC,aAAapB,GACbqB,MAAK,SAACC,GACLzB,EAAcmB,QAAQC,UAAYK,EAClCd,QAAQC,IAAIa,GACZd,QAAQC,IAAIa,EAAOC,kBACnBrB,EAAcsB,SAASF,EAAOC,iBAAiB,OAEhDE,OAAM,SAACC,GAAD,OAASlB,QAAQC,IAAIiB,EAAK,oBAOlC,IAsCD,gCACGlB,QAAQC,IAAI,uBACb,uBACEkB,IAAK9B,EACL+B,UAAQ,EACRC,MAAOxC,EAAOC,mBAEhB,uBACEqC,IAAK5B,EACL6B,UAAQ,EACRC,MAAOxC,EAAOK,oBAGhB,uBACA,wBAAQoC,QAlDQ,WAClBtB,QAAQC,IAAI,SACZP,EAAc6B,cAAcV,MAC1B,SAACW,GACCxB,QAAQC,IAAIC,KAAKC,UAAUqB,IAE3B9B,EAAc+B,oBAAoBD,MAEpC,SAAC1B,QA0CD,mBACA,wBAAQwB,QAjCS,WACnBtB,QAAQC,IAAI,UACZP,EAAcgC,eAAeb,MAC3B,SAACW,GACCxB,QAAQC,IAAIC,KAAKC,UAAUqB,IAE3B9B,EAAc+B,oBAAoBD,MAEpC,SAAC1B,QAyBD,oBACA,uBACA,0BAAU6B,SAAU,SAAC7B,GAAD,OAAQV,EAAUU,EAAE8B,OAAOC,SAC/C,wBAAQP,QA1CiB,WAC3B,IAAMQ,EAAO5B,KAAK6B,MAAM3C,GAExBM,EAAcsC,qBAAqB,IAAIC,sBAAsBH,KAuC3D,6BACA,wBAAQR,QAzBS,WACnB,IAAMvB,EAAYG,KAAK6B,MAAM3C,GAC7BM,EAAcwC,gBAAgB,IAAIC,gBAAgBpC,KAuBhD,2BACA,2BC7FSqC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8d45d1b3.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nfunction VideoPlayer() {\r\n  // const [textVal, setTextVal] = useState(\"\");\r\n  // const [consoleVal, setConsoleVal] = useState(\"\");\r\n\r\n  let textVal = \"\";\r\n  const localVideoRef = useRef(null);\r\n  const remoteVideoRef = useRef(null);\r\n\r\n  const pc_config = null;\r\n  const constraints = { video: true }; //audio: true,\r\n  const rtcPeerObject = new RTCPeerConnection(pc_config);\r\n\r\n  useEffect(() => {\r\n    rtcPeerObject.onicecandidate = (e) => {\r\n      if (e.candidate) {\r\n        console.log(JSON.stringify(e.candidate));\r\n      }\r\n    };\r\n\r\n    rtcPeerObject.oniceconnectionstatechange = (e) => {\r\n      console.log(e);\r\n    };\r\n\r\n    rtcPeerObject.ontrack = async (e) => {\r\n      remoteVideoRef.current.srcObject = await e.streams[0];\r\n      console.log(e.streams, \"peer object on track\");\r\n    };\r\n\r\n    navigator.mediaDevices\r\n      .getUserMedia(constraints)\r\n      .then((stream) => {\r\n        localVideoRef.current.srcObject = stream;\r\n        console.log(stream);\r\n        console.log(stream.getVideoTracks());\r\n        rtcPeerObject.addTrack(stream.getVideoTracks()[0]);\r\n      })\r\n      .catch((err) => console.log(err, \"error found\"));\r\n\r\n    // const success = (stream) => {\r\n    //   localVideoRef.current.srcObject = stream;\r\n    //   rtcPeerObject.addTrack(stream);\r\n    // };\r\n    //     const failure = (err) => console.log(err, \"error found\");\r\n  }, []);\r\n\r\n  const createOffer = () => {\r\n    console.log(\"offer\");\r\n    rtcPeerObject.createOffer().then(\r\n      (sdp) => {\r\n        console.log(JSON.stringify(sdp));\r\n        // setConsoleVal(JSON.stringify(sdp));\r\n        rtcPeerObject.setLocalDescription(sdp);\r\n      },\r\n      (e) => {}\r\n    );\r\n  };\r\n\r\n  const setRemoteDescription = () => {\r\n    const desc = JSON.parse(textVal);\r\n\r\n    rtcPeerObject.setRemoteDescription(new RTCSessionDescription(desc));\r\n  };\r\n\r\n  const createAnswer = () => {\r\n    console.log(\"Answer\");\r\n    rtcPeerObject.createAnswer().then(\r\n      (sdp) => {\r\n        console.log(JSON.stringify(sdp));\r\n        // setConsoleVal(JSON.stringify(sdp));\r\n        rtcPeerObject.setLocalDescription(sdp);\r\n      },\r\n      (e) => {}\r\n    );\r\n  };\r\n\r\n  const addCandidate = () => {\r\n    const candidate = JSON.parse(textVal);\r\n    rtcPeerObject.addIceCandidate(new RTCIceCandidate(candidate));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {console.log(\"executing..render..\")}\r\n      <video\r\n        ref={localVideoRef}\r\n        autoPlay\r\n        style={styles.localVideoPlayer}\r\n      ></video>\r\n      <video\r\n        ref={remoteVideoRef}\r\n        autoPlay\r\n        style={styles.remoteVideoPlayer}\r\n      ></video>\r\n\r\n      <br />\r\n      <button onClick={createOffer}>Offer</button>\r\n      <button onClick={createAnswer}>Answer</button>\r\n      <br />\r\n      <textarea onChange={(e) => (textVal = e.target.value)} />\r\n      <button onClick={setRemoteDescription}>Set Remote Desc</button>\r\n      <button onClick={addCandidate}>Add candidate</button>\r\n      <br />\r\n      {/* <p>{consoleVal}</p> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  localVideoPlayer: {\r\n    width: 250,\r\n    height: 250,\r\n    backgroundColor: \"black\",\r\n  },\r\n\r\n  remoteVideoPlayer: {\r\n    width: 350,\r\n    height: 350,\r\n    backgroundColor: \"yellow\",\r\n  },\r\n};\r\n\r\nexport default VideoPlayer;\r\n","import VideoPlayer from \"./components/VideoPlayer\";\n\nfunction App() {\n  return (\n    <div>\n      <VideoPlayer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}